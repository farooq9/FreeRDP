name: RDP

on:
  workflow_dispatch:

# -----------------------------------------------------------------------
# Job‚Äëlevel defaults (makes every step run under PowerShell automatically)
# -----------------------------------------------------------------------
defaults:
  run:
    shell: pwsh

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600   # 60‚ÄØhours ‚Äì the maximum you can request

    steps:
      # -----------------------------------------------------------------
      # 1Ô∏è‚É£ Enable RDP and open the firewall
      # -----------------------------------------------------------------
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop (disable the ‚Äúdeny‚Äù flag)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name 'fDenyTSConnections' -Value 0 -Force

          # Disable Network Level Authentication (NLA) ‚Äì ONLY if you really need it
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP‚ÄëTcp' `
                           -Name 'UserAuthentication' -Value 0 -Force

          # Set SecurityLayer = 0 (RDP Security ‚Äì again, only for testing)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP‚ÄëTcp' `
                           -Name 'SecurityLayer' -Value 0 -Force

          # Remove a possibly‚Äëexisting rule ‚Äì silence the error if it does not exist
          netsh advfirewall firewall delete rule name="RDP‚ÄëTailscale" > $null 2>&1

          # Open the RDP port (3389) to any inbound traffic on the runner
          netsh advfirewall firewall add rule name="RDP‚ÄëTailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # Restart the Remote Desktop service so the registry changes take effect
          Restart-Service -Name TermService -Force
          Start-Sleep -Seconds 5

      # -----------------------------------------------------------------
      # 2Ô∏è‚É£ Create a local RDP user with a strong random password
      # -----------------------------------------------------------------
      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security

          $charSet = @{
            Upper   = [char[]](65..90)   # A‚ÄëZ
            Lower   = [char[]](97..122)  # a‚Äëz
            Number  = [char[]](48..57)   # 0‚Äë9
            Special = ([char[]](33..47) + [char[]](58..64) + `
                       [char[]](91..96) + [char[]](123..126)) # !"#$%‚Ä¶ etc.
          }

          $rawPassword = @()
          $rawPassword += $charSet.Upper   | Get-Random -Count 4
          $rawPassword += $charSet.Lower   | Get-Random -Count 4
          $rawPassword += $charSet.Number  | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4

          # Shuffle the characters and build the final string
          $password = -join ($rawPassword | Sort-Object { Get-Random })

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          New-LocalUser -Name 'RDP' -Password $securePass -AccountNeverExpires -ErrorAction Stop
          Add-LocalGroupMember -Group 'Administrators'          -Member 'RDP'
          Add-LocalGroupMember -Group 'Remote Desktop Users'    -Member 'RDP'

          # Export the credentials to the workflow environment (so later steps can read them)
          "RDP_CREDS=User: RDP | Password: $password" >> $GITHUB_ENV

          # Sanity check ‚Äì abort if the user was not created
          if (-not (Get-LocalUser -Name 'RDP')) {
            Write-Error 'User creation failed'
            exit 1
          }

      # -----------------------------------------------------------------
      # 3Ô∏è‚É£ Install Tailscale (latest stable MSI at the time of writing)
      # -----------------------------------------------------------------
      - name: Install Tailscale
        run: |
          $tsUrl = 'https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi'
          $installerPath = Join-Path $env:TEMP 'tailscale.msi'

          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList '/i', "`"$installerPath`"", '/quiet', '/norestart' -Wait
          Remove-Item $installerPath -Force

      # -----------------------------------------------------------------
      # 4Ô∏è‚É£ Bring the runner online to the Tailscale network
      # -----------------------------------------------------------------
      - name: Establish Tailscale Connection
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $tsExe = "$env:ProgramFiles\Tailscale\tailscale.exe"

          # Bring the node up ‚Äì we use a unique hostname per workflow run
          & $tsExe up --authkey="$env:TAILSCALE_AUTH_KEY" --hostname="gh-runner-$env:GITHUB_RUN_ID"

          # Poll for an IPv4 address (max 10 attempts, 5‚ÄØs apart)
          $tsIP = $null
          $attempt = 0
          while (-not $tsIP -and $attempt -lt 10) {
            $tsIP = & $tsExe ip -4
            if ($tsIP) { break }
            Start-Sleep -Seconds 5
            $attempt++
          }

          if (-not $tsIP) {
            Write-Error 'Tailscale IP not assigned ‚Äì aborting.'
            exit 1
          }

          "TAILSCALE_IP=$tsIP" >> $GITHUB_ENV

      # -----------------------------------------------------------------
      # 5Ô∏è‚É£ Verify that RDP is reachable over the newly‚Äëassigned Tailscale IP
      # -----------------------------------------------------------------
      - name: Verify RDP Accessibility
        run: |
          Write-Host "üü¢ Tailscale IP: $env:TAILSCALE_IP"

          $test = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -InformationLevel Quiet
          if (-not $test) {
            Write-Error 'TCP test to port 3389 failed ‚Äì RDP not reachable.'
            exit 1
          }
          Write-Host '‚úÖ TCP connectivity to port 3389 succeeded.'

      # -----------------------------------------------------------------
      # 6Ô∏è‚É£ Keep the runner alive so you can actually RDP into it
      # -----------------------------------------------------------------
      - name: Maintain Connection
        run: |
          Write-Host "`n=== üì° RDP ACCESS INFORMATION ==="
          Write-Host "üîπ Address : $env:TAILSCALE_IP"
          Write-Host "üîπ Username: RDP"
          Write-Host "üîπ Password: $env:RDP_CREDS"
          Write-Host "===================================`n"

          # The runner will stay alive until the job times‚Äëout (3600‚ÄØmin) or you cancel it.
          while ($true) {
            Write-Host "[$(Get-Date -Format u)] RDP session still active ‚Äì press **Cancel workflow** to stop."
            Start-Sleep -Seconds 300   # 5‚ÄØmin heartbeat
          }
